{"version":3,"sources":["components/PostsList.tsx","utils/fetchClient.ts","components/Loader/Loader.tsx","components/NewCommentForm.tsx","components/PostDetails.tsx","components/UserSelector.tsx","App.tsx","index.tsx"],"names":["PostsList","posts","changePost","activePost","length","className","map","post","id","body","type","onClick","BASE_URL","wait","delay","Promise","resolve","setTimeout","request","url","method","data","options","JSON","stringify","headers","then","fetch","response","json","client","Loader","NewCommentForm","handleAddComment","useState","inputName","setInputName","inputEmail","setInutEmail","inputComment","setInputComment","isErrorName","setIsErrorName","isErrorEmail","setIsErrorEmail","isErrorComment","setIsErrorComment","isLoading","setIsLoading","changeInputText","event","target","name","value","clearFrom","submitForm","preventDefault","error","checkAllInputs","comment","newComment","postId","email","finally","onSubmit","htmlFor","placeholder","classNames","onChange","PostDetails","comments","setComments","isError","setIsError","isOpenForm","setIsOpenForm","handleDeleteComment","filter","deleteComment","useEffect","getComments","catch","title","style","marginBottom","href","UserSelector","users","changeUser","activeUser","isOpen","setIsOpen","role","hidden","user","chooseUser","App","setUsers","setActiveUser","setPosts","setActivePost","isLoding","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.352eaf59.chunk.js","sourcesContent":["import React from 'react';\nimport { IPost } from '../types/Post';\n\ninterface Props {\n  posts: IPost[] | null;\n  changePost: (post: IPost | null) => void;\n  activePost: IPost | null;\n}\n\nexport const PostsList: React.FC<Props> = ({\n  posts, changePost, activePost,\n}) => {\n  if (!posts) {\n    return null;\n  }\n\n  if (posts.length === 0) {\n    return (\n      <div className=\"notification is-warning\" data-cy=\"NoPostsYet\">\n        No posts yet\n      </div>\n    );\n  }\n\n  return (\n    <div data-cy=\"PostsList\">\n      <p className=\"title\">Posts:</p>\n\n      <table className=\"table is-fullwidth is-striped is-hoverable is-narrow\">\n        <thead>\n          <tr className=\"has-background-link-light\">\n            <th>#</th>\n            <th>Title</th>\n            <th> </th>\n          </tr>\n        </thead>\n\n        <tbody>\n          {posts.map((post: IPost) => (\n            <tr data-cy=\"Post\">\n              <td data-cy=\"PostId\">{post.id}</td>\n\n              <td data-cy=\"PostTitle\">\n                {post.body}\n              </td>\n\n              {activePost?.id === post.id ? (\n                <td className=\"has-text-right is-vcentered\">\n                  <button\n                    type=\"button\"\n                    data-cy=\"PostButton\"\n                    className=\"button is-link\"\n                    onClick={() => changePost(null)}\n                  >\n                    Close\n                  </button>\n                </td>\n              ) : (\n                <td className=\"has-text-right is-vcentered\">\n                  <button\n                    type=\"button\"\n                    data-cy=\"PostButton\"\n                    className=\"button is-link is-light\"\n                    onClick={() => changePost(post)}\n                  >\n                    Open\n                  </button>\n                </td>\n              )}\n\n            </tr>\n          ))}\n        </tbody>\n      </table>\n    </div>\n  );\n};\n","/* eslint-disable @typescript-eslint/no-explicit-any */\nimport { Comment, IComment } from '../types/Comment';\nimport { IPost } from '../types/Post';\nimport { IUser } from '../types/User';\n\nconst BASE_URL = 'https://mate.academy/students-api';\n\n// a promise resolved after a given delay\nfunction wait(delay: number) {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\n// To have autocompletion and avoid mistypes\ntype RequestMethod = 'GET' | 'POST' | 'PATCH' | 'DELETE';\n\nfunction request<T>(\n  url: string,\n  method: RequestMethod = 'GET',\n  data: any = null, // we can send any data to the server\n): Promise<T> {\n  const options: RequestInit = { method };\n\n  if (data) {\n    // We add body and Content-Type only for the requests with data\n    options.body = JSON.stringify(data);\n    options.headers = {\n      'Content-Type': 'application/json; charset=UTF-8',\n    };\n  }\n\n  // for a demo purpose we emulate a delay to see if Loaders work\n  return wait(300)\n    .then(() => fetch(BASE_URL + url, options))\n    .then(response => response.json());\n}\n\nexport const client = {\n  get: <T>(url: string) => request<T>(url),\n  post: <T>(url: string, data: any) => request<T>(url, 'POST', data),\n  patch: <T>(url: string, data: any) => request<T>(url, 'PATCH', data),\n  delete: (url: string) => request(url, 'DELETE'),\n};\n\nexport const getUsers = () => {\n  return client.get<IUser[]>('/users');\n};\n\nexport const getUserPosts = (id: number) => {\n  return client.get<IPost[]>(`/posts?userId=${id}`);\n};\n\nexport const getComments = (id: number) => {\n  return client.get<IComment[]>(`/comments?postId=${id}`);\n};\n\nexport const deleteComment = (id: number) => {\n  return client.delete(`/comments/${id}`);\n};\n\nexport const createComment = (comment: Comment) => {\n  return client.post('/comments', comment);\n};\n","import './Loader.scss';\n\nexport const Loader = () => (\n  <div className=\"Loader\" data-cy=\"Loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import classNames from 'classnames';\nimport React, { useState } from 'react';\nimport { IComment } from '../types/Comment';\n// import { IComment } from '../types/Comment';\nimport { IPost } from '../types/Post';\nimport { createComment } from '../utils/fetchClient';\n\ninterface Props {\n  post: IPost;\n  handleAddComment: (comment: IComment) => void;\n}\n\nexport const NewCommentForm: React.FC<Props> = (\n  { post, handleAddComment },\n) => {\n  const [inputName, setInputName] = useState<string>('');\n  const [inputEmail, setInutEmail] = useState<string>('');\n  const [inputComment, setInputComment] = useState<string>('');\n\n  const [isErrorName, setIsErrorName] = useState<boolean>(false);\n  const [isErrorEmail, setIsErrorEmail] = useState<boolean>(false);\n  const [isErrorComment, setIsErrorComment] = useState<boolean>(false);\n\n  const [isLoading, setIsLoading] = useState<boolean>(false);\n\n  const changeInputText = (\n    event: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>,\n  ) => {\n    const { name, value } = event.target;\n\n    switch (name) {\n      case 'name':\n        setIsErrorName(false);\n        setInputName(value);\n        break;\n      case 'email':\n        setIsErrorEmail(false);\n        setInutEmail(value);\n        break;\n      case 'body':\n        setIsErrorComment(false);\n        setInputComment(value);\n        break;\n      default:\n    }\n  };\n\n  const clearErrors = () => {\n    setIsErrorName(false);\n    setIsErrorEmail(false);\n    setIsErrorComment(false);\n  };\n\n  const clearFrom = () => {\n    setInputName('');\n    setInutEmail('');\n    setInputComment('');\n\n    clearErrors();\n  };\n\n  const checkAllInputs = () => {\n    let error = false;\n\n    if (!inputName) {\n      setIsErrorName(true);\n      error = true;\n    }\n\n    if (!inputEmail) {\n      setIsErrorEmail(true);\n      error = true;\n    }\n\n    if (!inputComment) {\n      setIsErrorComment(true);\n      error = true;\n    }\n\n    return error;\n  };\n\n  const submitForm = (event: React.FormEvent<HTMLFormElement>) => {\n    event.preventDefault();\n    setIsLoading(true);\n\n    const error = checkAllInputs();\n\n    if (error) {\n      setIsLoading(false);\n\n      return;\n    }\n\n    const newComment = {\n      postId: post.id,\n      name: inputName,\n      email: inputEmail,\n      body: inputComment,\n    };\n\n    createComment(newComment)\n      .then((data) => {\n        handleAddComment(data as IComment);\n        clearFrom();\n      })\n      .finally(() => setIsLoading(false));\n  };\n\n  return (\n    <form data-cy=\"NewCommentForm\" onSubmit={(event) => submitForm(event)}>\n      <div className=\"field\" data-cy=\"NameField\">\n        <label className=\"label\" htmlFor=\"comment-author-name\">\n          Author Name\n        </label>\n\n        <div className=\"control has-icons-left has-icons-right\">\n          <input\n            type=\"text\"\n            name=\"name\"\n            id=\"comment-author-name\"\n            placeholder=\"Name Surname\"\n            className={classNames('input', { 'is-danger': isErrorName })}\n            value={inputName}\n            onChange={(event) => {\n              changeInputText(event);\n            }}\n          />\n\n          <span className=\"icon is-small is-left\">\n            <i className=\"fas fa-user\" />\n          </span>\n\n          {isErrorName && (\n            <span\n              className=\"icon is-small is-right has-text-danger\"\n              data-cy=\"ErrorIcon\"\n            >\n              <i className=\"fas fa-exclamation-triangle\" />\n            </span>\n          )}\n        </div>\n\n        {isErrorName && (\n          <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n            Name is required\n          </p>\n        )}\n      </div>\n\n      <div className=\"field\" data-cy=\"EmailField\">\n        <label className=\"label\" htmlFor=\"comment-author-email\">\n          Author Email\n        </label>\n\n        <div className=\"control has-icons-left has-icons-right\">\n          <input\n            type=\"text\"\n            name=\"email\"\n            id=\"comment-author-email\"\n            placeholder=\"email@test.com\"\n            className={classNames('input', { 'is-danger': isErrorEmail })}\n            value={inputEmail}\n            onChange={(event) => {\n              changeInputText(event);\n            }}\n          />\n\n          <span className=\"icon is-small is-left\">\n            <i className=\"fas fa-envelope\" />\n          </span>\n\n          {isErrorEmail && (\n            <span\n              className=\"icon is-small is-right has-text-danger\"\n              data-cy=\"ErrorIcon\"\n            >\n              <i className=\"fas fa-exclamation-triangle\" />\n            </span>\n          )}\n        </div>\n\n        {isErrorEmail && (\n          <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n            Email is required\n          </p>\n        )}\n      </div>\n\n      <div className=\"field\" data-cy=\"BodyField\">\n        <label className=\"label\" htmlFor=\"comment-body\">\n          Comment Text\n        </label>\n\n        <div className=\"control\">\n          <textarea\n            id=\"comment-body\"\n            name=\"body\"\n            placeholder=\"Type comment here\"\n            className={classNames('input', { 'is-danger': isErrorComment })}\n            value={inputComment}\n            onChange={(event) => {\n              changeInputText(event);\n            }}\n          />\n        </div>\n\n        {isErrorComment && (\n          <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n            Enter some text\n          </p>\n        )}\n      </div>\n\n      <div className=\"field is-grouped\">\n        <div className=\"control\">\n          <button\n            type=\"submit\"\n            className={classNames(\n              'button is-link', { 'is-loading': isLoading },\n            )}\n          >\n            Add\n          </button>\n        </div>\n\n        <div className=\"control\">\n          {/* eslint-disable-next-line react/button-has-type */}\n          <button\n            type=\"reset\"\n            className=\"button is-link is-light\"\n            onClick={clearFrom}\n          >\n            Clear\n          </button>\n        </div>\n      </div>\n    </form>\n  );\n};\n","import React, { useEffect, useState } from 'react';\nimport { IComment } from '../types/Comment';\nimport { IPost } from '../types/Post';\nimport { deleteComment, getComments } from '../utils/fetchClient';\nimport { Loader } from './Loader';\nimport { NewCommentForm } from './NewCommentForm';\n\ninterface Props {\n  activePost: IPost;\n}\n\nexport const PostDetails: React.FC<Props> = ({ activePost }) => {\n  const [comments, setComments] = useState<IComment[]>([]);\n\n  const [isLoading, setIsLoading] = useState<boolean>(false);\n  const [isError, setIsError] = useState<boolean>(false);\n  const [isOpenForm, setIsOpenForm] = useState<boolean>(false);\n\n  const handleDeleteComment = (id: number) => {\n    setComments(comments?.filter((comment: IComment) => {\n      return comment.id !== id;\n    }));\n\n    deleteComment(id);\n  };\n\n  const handleAddComment = (comment: IComment) => {\n    setComments([comment, ...comments]);\n  };\n\n  const openForm = () => {\n    setIsOpenForm(true);\n  };\n\n  useEffect(() => {\n    setIsLoading(true);\n\n    getComments(activePost.id)\n      .then(setComments)\n      .catch(() => setIsError(true))\n      .finally(() => setIsLoading(false));\n  }, [activePost]);\n\n  const { id, title, body } = activePost;\n\n  return (\n    <div className=\"content\" data-cy=\"PostDetails\">\n      <div className=\"content\" data-cy=\"PostDetails\">\n        <div className=\"block\">\n          <h2 data-cy=\"PostTitle\">\n            {`#${id}: ${title}`}\n          </h2>\n\n          <p data-cy=\"PostBody\">\n            {body}\n          </p>\n        </div>\n\n        <div className=\"block\">\n          {isLoading && <Loader />}\n\n          {isError && (\n            <div className=\"notification is-danger\" data-cy=\"CommentsError\">\n              Something went wrong\n            </div>\n          )}\n\n          {comments?.length !== 0 ? (\n            <div style={{ marginBottom: '1em' }}>\n              <p className=\"title is-4\">Comments:</p>\n\n              {comments?.map((comment: IComment) => (\n                <article\n                  className=\"message is-small\"\n                  data-cy=\"Comment\"\n                  key={comment.id}\n                >\n                  <div className=\"message-header\">\n                    <a\n                      href=\"mailto:misha@mate.academy\"\n                      data-cy=\"CommentAuthor\"\n                    >\n                      {comment.name}\n                    </a>\n                    <button\n                      data-cy=\"CommentDelete\"\n                      type=\"button\"\n                      className=\"delete is-small\"\n                      aria-label=\"delete\"\n                      onClick={() => handleDeleteComment(comment.id)}\n                    >\n                      delete button\n                    </button>\n                  </div>\n\n                  <div className=\"message-body\" data-cy=\"CommentBody\">\n                    {comment.body}\n                  </div>\n                </article>\n              ))}\n            </div>\n          ) : (\n            <p className=\"title is-4\" data-cy=\"NoCommentsMessage\">\n              No comments yet\n            </p>\n          )}\n\n          {!isOpenForm && (\n            <button\n              data-cy=\"WriteCommentButton\"\n              type=\"button\"\n              className=\"button is-link\"\n              onClick={openForm}\n            >\n              Write a comment\n            </button>\n          )}\n        </div>\n        {isOpenForm && (\n          <NewCommentForm\n            post={activePost}\n            handleAddComment={handleAddComment}\n          />\n        )}\n      </div>\n    </div>\n  );\n};\n","import classNames from 'classnames';\nimport React, { useState } from 'react';\nimport { IUser } from '../types/User';\n\ninterface Props {\n  users: IUser[] | null;\n  changeUser: (user: IUser) => void;\n  activeUser: IUser | null;\n}\n\nexport const UserSelector: React.FC<Props> = (\n  { users, changeUser, activeUser },\n) => {\n  const [isOpen, setIsOpen] = useState<boolean>(true);\n  const changeIsOpen = () => setIsOpen(!isOpen);\n\n  const chooseUser = (user: IUser) => {\n    changeUser(user);\n    // eslint-disable-next-line no-console\n    setIsOpen(true);\n  };\n\n  return (\n    <div\n      data-cy=\"UserSelector\"\n      className=\"dropdown is-active\"\n    >\n      <div className=\"dropdown-trigger\">\n        <button\n          type=\"button\"\n          className=\"button\"\n          aria-haspopup=\"true\"\n          aria-controls=\"dropdown-menu\"\n          onClick={changeIsOpen}\n        >\n          {activeUser ? (\n            <span>{activeUser.name}</span>\n          ) : (\n            <span>Choose a user</span>\n          )}\n\n          <span className=\"icon is-small\">\n            <i className=\"fas fa-angle-down\" aria-hidden=\"true\" />\n          </span>\n        </button>\n      </div>\n\n      <div\n        className=\"dropdown-menu\"\n        id=\"dropdown-menu\"\n        role=\"menu\"\n      >\n        <div className=\"dropdown-content\" hidden={isOpen}>\n          {users?.map(user => (\n            <a\n              key={user.id}\n              href={`#user-${user.id}`}\n              className={classNames(\n                'dropdown-item', { 'is-active': user.id === activeUser?.id },\n              )}\n              onClick={() => chooseUser(user)}\n            >\n              {user.name}\n            </a>\n          ))}\n        </div>\n      </div>\n    </div>\n  );\n};\n","import React, { useEffect, useState } from 'react';\nimport 'bulma/bulma.sass';\nimport '@fortawesome/fontawesome-free/css/all.css';\nimport './App.scss';\nimport classNames from 'classnames';\n\nimport { PostsList } from './components/PostsList';\nimport { PostDetails } from './components/PostDetails';\nimport { UserSelector } from './components/UserSelector';\nimport { Loader } from './components/Loader';\nimport { getUserPosts, getUsers } from './utils/fetchClient';\nimport { IUser } from './types/User';\nimport { IPost } from './types/Post';\n\nexport const App: React.FC = () => {\n  const [users, setUsers] = useState<IUser[] | null>(null);\n  const [activeUser, setActiveUser] = useState<IUser | null>(null);\n\n  const [posts, setPosts] = useState<IPost[] | null>(null);\n  const [activePost, setActivePost] = useState<IPost | null>(null);\n\n  const [isError, setIsError] = useState<boolean>(false);\n  const [isLoding, setIsLoading] = useState<boolean>(false);\n\n  const changeUser = (user: IUser) => {\n    setActiveUser(user);\n  };\n\n  const changePost = (post: IPost | null) => {\n    setActivePost(post);\n  };\n\n  useEffect(() => {\n    getUsers()\n      .then(setUsers)\n      .catch(() => setIsError(true));\n  }, []);\n\n  useEffect(() => {\n    if (!activeUser) {\n      return;\n    }\n\n    setActivePost(null);\n\n    setIsLoading(true);\n    getUserPosts(activeUser.id)\n      .then(setPosts)\n      .finally(() => setIsLoading(false));\n  }, [activeUser]);\n\n  return (\n    <main className=\"section\">\n      <div className=\"container\">\n        <div className=\"tile is-ancestor\">\n          <div className=\"tile is-parent\">\n            <div className=\"tile is-child box is-success\">\n              <div className=\"block\">\n                <UserSelector\n                  users={users}\n                  changeUser={changeUser}\n                  activeUser={activeUser}\n                />\n              </div>\n\n              <div className=\"block\" data-cy=\"MainContent\">\n                {!activeUser && (\n                  <p data-cy=\"NoSelectedUser\">\n                    No user selected\n                  </p>\n                )}\n\n                {isLoding && (\n                  <Loader />\n                )}\n\n                {isError && (\n                  <div\n                    className=\"notification is-danger\"\n                    data-cy=\"PostsLoadingError\"\n                  >\n                    Something went wrong!\n                  </div>\n                )}\n\n                {posts && (\n                  <PostsList\n                    posts={posts}\n                    changePost={changePost}\n                    activePost={activePost}\n                  />\n                )}\n\n              </div>\n            </div>\n          </div>\n\n          <div\n            data-cy=\"Sidebar\"\n            className={classNames(\n              'tile',\n              'is-parent',\n              'is-8-desktop',\n              'Sidebar',\n              { 'Sidebar--open': activePost },\n            )}\n          >\n            {activePost && (\n              <div className=\"tile is-child box is-success \">\n                <PostDetails activePost={activePost} />\n              </div>\n            )}\n\n          </div>\n        </div>\n      </div>\n    </main>\n  );\n};\n","import ReactDOM from 'react-dom';\n\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}