{"version":3,"sources":["components/PostsList.tsx","utils/fetchClient.ts","types/ErrorTypes.ts","components/Loader/Loader.tsx","components/NewCommentForm.tsx","components/PostDetails.tsx","components/UserSelector.tsx","App.tsx","index.tsx"],"names":["PostsList","posts","changePost","activePost","length","className","map","post","id","body","type","onClick","BASE_URL","wait","delay","Promise","resolve","setTimeout","request","url","method","data","options","JSON","stringify","headers","then","fetch","response","json","ErrorTypes","client","Loader","NewCommentForm","handleAddComment","useState","inputName","inputEmail","inputComment","inputData","setInputData","isErrorName","isErrorEmail","isErrorComment","errors","setErrors","isLoading","setIsLoading","changeInputText","event","target","name","value","prev","clearErrors","useCallback","clearFrom","submitForm","preventDefault","error","Name","Email","Comment","checkAllInputs","comment","newComment","postId","email","finally","onSubmit","htmlFor","placeholder","classNames","onChange","PostDetails","comments","setComments","isError","setIsError","isOpenForm","setIsOpenForm","handleDeleteComment","filter","deleteComment","openForm","useEffect","getComments","catch","title","style","marginBottom","href","UserSelector","users","changeUser","activeUser","isOpen","setIsOpen","role","hidden","user","chooseUser","App","setUsers","setActiveUser","setPosts","setActivePost","isLoding","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.cab83538.chunk.js","sourcesContent":["import React from 'react';\nimport { IPost } from '../types/Post';\n\ninterface Props {\n  posts: IPost[] | null;\n  changePost: (post: IPost | null) => void;\n  activePost: IPost | null;\n}\n\nexport const PostsList: React.FC<Props> = ({\n  posts, changePost, activePost,\n}) => {\n  if (!posts) {\n    return null;\n  }\n\n  if (posts.length === 0) {\n    return (\n      <div className=\"notification is-warning\" data-cy=\"NoPostsYet\">\n        No posts yet\n      </div>\n    );\n  }\n\n  return (\n    <div data-cy=\"PostsList\">\n      <p className=\"title\">Posts:</p>\n\n      <table className=\"table is-fullwidth is-striped is-hoverable is-narrow\">\n        <thead>\n          <tr className=\"has-background-link-light\">\n            <th>#</th>\n            <th>Title</th>\n            <th> </th>\n          </tr>\n        </thead>\n\n        <tbody>\n          {posts.map((post: IPost) => (\n            <tr data-cy=\"Post\">\n              <td data-cy=\"PostId\">{post.id}</td>\n\n              <td data-cy=\"PostTitle\">\n                {post.body}\n              </td>\n\n              {activePost?.id === post.id ? (\n                <td className=\"has-text-right is-vcentered\">\n                  <button\n                    type=\"button\"\n                    data-cy=\"PostButton\"\n                    className=\"button is-link\"\n                    onClick={() => changePost(null)}\n                  >\n                    Close\n                  </button>\n                </td>\n              ) : (\n                <td className=\"has-text-right is-vcentered\">\n                  <button\n                    type=\"button\"\n                    data-cy=\"PostButton\"\n                    className=\"button is-link is-light\"\n                    onClick={() => changePost(post)}\n                  >\n                    Open\n                  </button>\n                </td>\n              )}\n\n            </tr>\n          ))}\n        </tbody>\n      </table>\n    </div>\n  );\n};\n","/* eslint-disable @typescript-eslint/no-explicit-any */\nimport { Comment, IComment } from '../types/Comment';\nimport { IPost } from '../types/Post';\nimport { IUser } from '../types/User';\n\nconst BASE_URL = 'https://mate.academy/students-api';\n\n// a promise resolved after a given delay\nfunction wait(delay: number) {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\n// To have autocompletion and avoid mistypes\ntype RequestMethod = 'GET' | 'POST' | 'PATCH' | 'DELETE';\n\nfunction request<T>(\n  url: string,\n  method: RequestMethod = 'GET',\n  data: any = null, // we can send any data to the server\n): Promise<T> {\n  const options: RequestInit = { method };\n\n  if (data) {\n    // We add body and Content-Type only for the requests with data\n    options.body = JSON.stringify(data);\n    options.headers = {\n      'Content-Type': 'application/json; charset=UTF-8',\n    };\n  }\n\n  // for a demo purpose we emulate a delay to see if Loaders work\n  return wait(300)\n    .then(() => fetch(BASE_URL + url, options))\n    .then(response => response.json());\n}\n\nexport const client = {\n  get: <T>(url: string) => request<T>(url),\n  post: <T>(url: string, data: any) => request<T>(url, 'POST', data),\n  patch: <T>(url: string, data: any) => request<T>(url, 'PATCH', data),\n  delete: (url: string) => request(url, 'DELETE'),\n};\n\nexport const getUsers = () => {\n  return client.get<IUser[]>('/users');\n};\n\nexport const getUserPosts = (id: number) => {\n  return client.get<IPost[]>(`/posts?userId=${id}`);\n};\n\nexport const getComments = (id: number) => {\n  return client.get<IComment[]>(`/comments?postId=${id}`);\n};\n\nexport const deleteComment = (id: number) => {\n  return client.delete(`/comments/${id}`);\n};\n\nexport const createComment = (comment: Comment) => {\n  return client.post('/comments', comment);\n};\n","export enum ErrorTypes {\n  Name = 'Name is required',\n  Email = 'Email is required',\n  Comment = 'Enter some text',\n}\n","import './Loader.scss';\n\nexport const Loader = () => (\n  <div className=\"Loader\" data-cy=\"Loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import classNames from 'classnames';\nimport React, { useCallback, useState } from 'react';\nimport { IComment } from '../types/Comment';\nimport { ErrorTypes } from '../types/ErrorTypes';\nimport { IPost } from '../types/Post';\nimport { createComment } from '../utils/fetchClient';\n\ninterface Props {\n  post: IPost;\n  handleAddComment: (comment: IComment) => void;\n}\n\ninterface Errors {\n  isErrorName: ErrorTypes | null;\n  isErrorEmail: ErrorTypes | null;\n  isErrorComment: ErrorTypes | null;\n}\n\nexport const NewCommentForm: React.FC<Props> = (\n  { post, handleAddComment },\n) => {\n  const [inputData, setInputData] = useState({\n    inputName: '',\n    inputEmail: '',\n    inputComment: '',\n  });\n\n  const { inputName, inputEmail, inputComment } = inputData;\n\n  const [errors, setErrors] = useState<Errors>({\n    isErrorName: null,\n    isErrorEmail: null,\n    isErrorComment: null,\n  });\n\n  const { isErrorName, isErrorEmail, isErrorComment } = errors;\n\n  const [isLoading, setIsLoading] = useState<boolean>(false);\n\n  const changeInputText = (\n    event: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>,\n  ) => {\n    const { name, value } = event.target;\n\n    switch (name) {\n      case 'name':\n        setErrors((prev) => ({ ...prev, isErrorName: null }));\n        setInputData((prev) => ({ ...prev, inputName: value }));\n        break;\n      case 'email':\n        setErrors((prev) => ({ ...prev, isErrorEmail: null }));\n        setInputData((prev) => ({ ...prev, inputEmail: value }));\n        break;\n      case 'body':\n        setErrors((prev) => ({ ...prev, isErrorComment: null }));\n        setInputData((prev) => ({ ...prev, inputComment: value }));\n        break;\n      default:\n    }\n  };\n\n  const clearErrors = useCallback(() => {\n    setErrors({\n      isErrorName: null,\n      isErrorEmail: null,\n      isErrorComment: null,\n    });\n  }, []);\n\n  const clearFrom = useCallback(() => {\n    setInputData({\n      inputName: '',\n      inputEmail: '',\n      inputComment: '',\n    });\n\n    clearErrors();\n  }, []);\n\n  const checkAllInputs = () => {\n    let error = false;\n\n    if (!inputName) {\n      setErrors((prev) => ({ ...prev, isErrorName: ErrorTypes.Name }));\n      error = true;\n    }\n\n    if (!inputEmail) {\n      setErrors((prev) => ({ ...prev, isErrorEmail: ErrorTypes.Email }));\n      error = true;\n    }\n\n    if (!inputComment) {\n      setErrors((prev) => ({ ...prev, isErrorComment: ErrorTypes.Comment }));\n      error = true;\n    }\n\n    return error;\n  };\n\n  const submitForm = (event: React.FormEvent<HTMLFormElement>) => {\n    event.preventDefault();\n    setIsLoading(true);\n\n    const error = checkAllInputs();\n\n    if (error) {\n      setIsLoading(false);\n\n      return;\n    }\n\n    const newComment = {\n      postId: post.id,\n      name: inputName,\n      email: inputEmail,\n      body: inputComment,\n    };\n\n    createComment(newComment)\n      .then((data) => {\n        handleAddComment(data as IComment);\n        clearFrom();\n      })\n      .finally(() => setIsLoading(false));\n  };\n\n  return (\n    <form data-cy=\"NewCommentForm\" onSubmit={(event) => submitForm(event)}>\n      <div className=\"field\" data-cy=\"NameField\">\n        <label className=\"label\" htmlFor=\"comment-author-name\">\n          Author Name\n        </label>\n\n        <div className=\"control has-icons-left has-icons-right\">\n          <input\n            type=\"text\"\n            name=\"name\"\n            id=\"comment-author-name\"\n            placeholder=\"Name Surname\"\n            className={classNames('input', { 'is-danger': isErrorName })}\n            value={inputName}\n            onChange={(event) => {\n              changeInputText(event);\n            }}\n          />\n\n          <span className=\"icon is-small is-left\">\n            <i className=\"fas fa-user\" />\n          </span>\n\n          {isErrorName && (\n            <span\n              className=\"icon is-small is-right has-text-danger\"\n              data-cy=\"ErrorIcon\"\n            >\n              <i className=\"fas fa-exclamation-triangle\" />\n            </span>\n          )}\n        </div>\n\n        {isErrorName && (\n          <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n            {ErrorTypes.Name}\n          </p>\n        )}\n      </div>\n\n      <div className=\"field\" data-cy=\"EmailField\">\n        <label className=\"label\" htmlFor=\"comment-author-email\">\n          Author Email\n        </label>\n\n        <div className=\"control has-icons-left has-icons-right\">\n          <input\n            type=\"text\"\n            name=\"email\"\n            id=\"comment-author-email\"\n            placeholder=\"email@test.com\"\n            className={classNames('input', { 'is-danger': isErrorEmail })}\n            value={inputEmail}\n            onChange={(event) => {\n              changeInputText(event);\n            }}\n          />\n\n          <span className=\"icon is-small is-left\">\n            <i className=\"fas fa-envelope\" />\n          </span>\n\n          {isErrorEmail && (\n            <span\n              className=\"icon is-small is-right has-text-danger\"\n              data-cy=\"ErrorIcon\"\n            >\n              <i className=\"fas fa-exclamation-triangle\" />\n            </span>\n          )}\n        </div>\n\n        {isErrorEmail && (\n          <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n            {ErrorTypes.Email}\n          </p>\n        )}\n      </div>\n\n      <div className=\"field\" data-cy=\"BodyField\">\n        <label className=\"label\" htmlFor=\"comment-body\">\n          Comment Text\n        </label>\n\n        <div className=\"control\">\n          <textarea\n            id=\"comment-body\"\n            name=\"body\"\n            placeholder=\"Type comment here\"\n            className={classNames('input', { 'is-danger': isErrorComment })}\n            value={inputComment}\n            onChange={(event) => {\n              changeInputText(event);\n            }}\n          />\n        </div>\n\n        {isErrorComment && (\n          <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n            {ErrorTypes.Comment}\n          </p>\n        )}\n      </div>\n\n      <div className=\"field is-grouped\">\n        <div className=\"control\">\n          <button\n            type=\"submit\"\n            className={classNames(\n              'button is-link', { 'is-loading': isLoading },\n            )}\n          >\n            Add\n          </button>\n        </div>\n\n        <div className=\"control\">\n          {/* eslint-disable-next-line react/button-has-type */}\n          <button\n            type=\"reset\"\n            className=\"button is-link is-light\"\n            onClick={clearFrom}\n          >\n            Clear\n          </button>\n        </div>\n      </div>\n    </form>\n  );\n};\n","import React, { useCallback, useEffect, useState } from 'react';\nimport { IComment } from '../types/Comment';\nimport { IPost } from '../types/Post';\nimport { deleteComment, getComments } from '../utils/fetchClient';\nimport { Loader } from './Loader';\nimport { NewCommentForm } from './NewCommentForm';\n\ninterface Props {\n  activePost: IPost;\n}\n\nexport const PostDetails: React.FC<Props> = ({ activePost }) => {\n  const [comments, setComments] = useState<IComment[]>([]);\n\n  const [isLoading, setIsLoading] = useState<boolean>(false);\n  const [isError, setIsError] = useState<boolean>(false);\n  const [isOpenForm, setIsOpenForm] = useState<boolean>(false);\n\n  const handleDeleteComment = useCallback((id: number) => {\n    setComments(comments?.filter((comment: IComment) => {\n      return comment.id !== id;\n    }));\n\n    deleteComment(id);\n  }, [comments]);\n\n  const handleAddComment = useCallback((comment: IComment) => {\n    setComments([comment, ...comments]);\n  }, [comments]);\n\n  const openForm = useCallback(() => {\n    setIsOpenForm(true);\n  }, []);\n\n  useEffect(() => {\n    setIsLoading(true);\n\n    getComments(activePost.id)\n      .then(setComments)\n      .catch(() => setIsError(true))\n      .finally(() => setIsLoading(false));\n  }, [activePost]);\n\n  const { id, title, body } = activePost;\n\n  return (\n    <div className=\"content\" data-cy=\"PostDetails\">\n      <div className=\"content\" data-cy=\"PostDetails\">\n        <div className=\"block\">\n          <h2 data-cy=\"PostTitle\">\n            {`#${id}: ${title}`}\n          </h2>\n\n          <p data-cy=\"PostBody\">\n            {body}\n          </p>\n        </div>\n\n        <div className=\"block\">\n          {isLoading && <Loader />}\n\n          {isError && (\n            <div className=\"notification is-danger\" data-cy=\"CommentsError\">\n              Something went wrong\n            </div>\n          )}\n\n          {comments?.length !== 0 ? (\n            <div style={{ marginBottom: '1em' }}>\n              <p className=\"title is-4\">Comments:</p>\n\n              {comments?.map((comment: IComment) => (\n                <article\n                  className=\"message is-small\"\n                  data-cy=\"Comment\"\n                  key={comment.id}\n                >\n                  <div className=\"message-header\">\n                    <a\n                      href=\"mailto:misha@mate.academy\"\n                      data-cy=\"CommentAuthor\"\n                    >\n                      {comment.name}\n                    </a>\n                    <button\n                      data-cy=\"CommentDelete\"\n                      type=\"button\"\n                      className=\"delete is-small\"\n                      aria-label=\"delete\"\n                      onClick={() => handleDeleteComment(comment.id)}\n                    >\n                      delete button\n                    </button>\n                  </div>\n\n                  <div className=\"message-body\" data-cy=\"CommentBody\">\n                    {comment.body}\n                  </div>\n                </article>\n              ))}\n            </div>\n          ) : (\n            <p className=\"title is-4\" data-cy=\"NoCommentsMessage\">\n              No comments yet\n            </p>\n          )}\n\n          {!isOpenForm && (\n            <button\n              data-cy=\"WriteCommentButton\"\n              type=\"button\"\n              className=\"button is-link\"\n              onClick={openForm}\n            >\n              Write a comment\n            </button>\n          )}\n        </div>\n        {isOpenForm && (\n          <NewCommentForm\n            post={activePost}\n            handleAddComment={handleAddComment}\n          />\n        )}\n      </div>\n    </div>\n  );\n};\n","import classNames from 'classnames';\nimport React, { useState } from 'react';\nimport { IUser } from '../types/User';\n\ninterface Props {\n  users: IUser[] | null;\n  changeUser: (user: IUser) => void;\n  activeUser: IUser | null;\n}\n\nexport const UserSelector: React.FC<Props> = (\n  { users, changeUser, activeUser },\n) => {\n  const [isOpen, setIsOpen] = useState<boolean>(true);\n  const changeIsOpen = () => setIsOpen(!isOpen);\n\n  const chooseUser = (user: IUser) => {\n    changeUser(user);\n    setIsOpen(true);\n  };\n\n  return (\n    <div\n      data-cy=\"UserSelector\"\n      className=\"dropdown is-active\"\n    >\n      <div className=\"dropdown-trigger\">\n        <button\n          type=\"button\"\n          className=\"button\"\n          aria-haspopup=\"true\"\n          aria-controls=\"dropdown-menu\"\n          onClick={changeIsOpen}\n        >\n          {activeUser ? (\n            <span>{activeUser.name}</span>\n          ) : (\n            <span>Choose a user</span>\n          )}\n\n          <span className=\"icon is-small\">\n            <i className=\"fas fa-angle-down\" aria-hidden=\"true\" />\n          </span>\n        </button>\n      </div>\n\n      <div\n        className=\"dropdown-menu\"\n        id=\"dropdown-menu\"\n        role=\"menu\"\n      >\n        <div className=\"dropdown-content\" hidden={isOpen}>\n          {users?.map(user => (\n            <a\n              key={user.id}\n              href={`#user-${user.id}`}\n              className={classNames(\n                'dropdown-item', { 'is-active': user.id === activeUser?.id },\n              )}\n              onClick={() => chooseUser(user)}\n            >\n              {user.name}\n            </a>\n          ))}\n        </div>\n      </div>\n    </div>\n  );\n};\n","import React, { useCallback, useEffect, useState } from 'react';\nimport 'bulma/bulma.sass';\nimport '@fortawesome/fontawesome-free/css/all.css';\nimport './App.scss';\nimport classNames from 'classnames';\n\nimport { PostsList } from './components/PostsList';\nimport { PostDetails } from './components/PostDetails';\nimport { UserSelector } from './components/UserSelector';\nimport { Loader } from './components/Loader';\nimport { getUserPosts, getUsers } from './utils/fetchClient';\nimport { IUser } from './types/User';\nimport { IPost } from './types/Post';\n\nexport const App: React.FC = () => {\n  const [users, setUsers] = useState<IUser[] | null>(null);\n  const [activeUser, setActiveUser] = useState<IUser | null>(null);\n\n  const [posts, setPosts] = useState<IPost[] | null>(null);\n  const [activePost, setActivePost] = useState<IPost | null>(null);\n\n  const [isError, setIsError] = useState<boolean>(false);\n  const [isLoding, setIsLoading] = useState<boolean>(false);\n\n  const changeUser = useCallback((user: IUser) => {\n    setActiveUser(user);\n  }, []);\n\n  const changePost = useCallback((post: IPost | null) => {\n    setActivePost(post);\n  }, []);\n\n  useEffect(() => {\n    getUsers()\n      .then(setUsers)\n      .catch(() => setIsError(true));\n  }, []);\n\n  useEffect(() => {\n    if (!activeUser) {\n      return;\n    }\n\n    setActivePost(null);\n    setPosts(null);\n\n    setIsLoading(true);\n    getUserPosts(activeUser.id)\n      .then(setPosts)\n      .finally(() => setIsLoading(false));\n  }, [activeUser]);\n\n  return (\n    <main className=\"section\">\n      <div className=\"container\">\n        <div className=\"tile is-ancestor\">\n          <div className=\"tile is-parent\">\n            <div className=\"tile is-child box is-success\">\n              <div className=\"block\">\n                <UserSelector\n                  users={users}\n                  changeUser={changeUser}\n                  activeUser={activeUser}\n                />\n              </div>\n\n              <div className=\"block\" data-cy=\"MainContent\">\n                {!activeUser && (\n                  <p data-cy=\"NoSelectedUser\">\n                    No user selected\n                  </p>\n                )}\n\n                {isLoding && (\n                  <Loader />\n                )}\n\n                {isError && (\n                  <div\n                    className=\"notification is-danger\"\n                    data-cy=\"PostsLoadingError\"\n                  >\n                    Something went wrong!\n                  </div>\n                )}\n\n                {posts && (\n                  <PostsList\n                    posts={posts}\n                    changePost={changePost}\n                    activePost={activePost}\n                  />\n                )}\n\n              </div>\n            </div>\n          </div>\n\n          <div\n            data-cy=\"Sidebar\"\n            className={classNames(\n              'tile',\n              'is-parent',\n              'is-8-desktop',\n              'Sidebar',\n              { 'Sidebar--open': activePost },\n            )}\n          >\n            {activePost && (\n              <div className=\"tile is-child box is-success \">\n                <PostDetails activePost={activePost} />\n              </div>\n            )}\n\n          </div>\n        </div>\n      </div>\n    </main>\n  );\n};\n","import ReactDOM from 'react-dom';\n\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}